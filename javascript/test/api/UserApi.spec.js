/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at &lt;a href&#61;&quot;http://swagger.io&quot;&gt;http://swagger.io&lt;/a&gt; or on irc.freenode.net, #swagger.  For this sample, you can use the api key &quot;special-key&quot; to test the authorization filters
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@wordnik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * Do not edit the class manually.
 */
import {expect} from 'chai';
import UserRequests  from '../../src/api/UserRequests';

describe('UserApi', function(){
  let requests;
  beforeEach(function() {
    requests = new UserRequests({
        registerHandler(){
        },
        sendRequest(){
        }
    });

  });


    describe('createUser', function() {
      it('should send request createUser successfully', ()=> {
        //uncomment below and update the code to test createUser
        //return requests.createUser(opts: any).then(response=> {
        //  if (error) throw error;
        //  expect(response).to.be();
        //});

      });
    });

    describe('createUsersWithArrayInput', function() {
      it('should send request createUsersWithArrayInput successfully', ()=> {
        //uncomment below and update the code to test createUsersWithArrayInput
        //return requests.createUsersWithArrayInput(body: any, opts: any).then(response=> {
        //  if (error) throw error;
        //  expect(response).to.be();
        //});

      });
    });

    describe('createUsersWithListInput', function() {
      it('should send request createUsersWithListInput successfully', ()=> {
        //uncomment below and update the code to test createUsersWithListInput
        //return requests.createUsersWithListInput(opts: any).then(response=> {
        //  if (error) throw error;
        //  expect(response).to.be();
        //});

      });
    });

    describe('deleteUser', function() {
      it('should send request deleteUser successfully', ()=> {
        //uncomment below and update the code to test deleteUser
        //return requests.deleteUser(username: string).then(response=> {
        //  if (error) throw error;
        //  expect(response).to.be();
        //});

      });
    });

    describe('getUserByName', function() {
      it('should send request getUserByName successfully', ()=> {
        //uncomment below and update the code to test getUserByName
        //return requests.getUserByName(username: string).then(response=> {
        //  if (error) throw error;
        //  expect(response).to.be();
        //});

      });
    });

    describe('loginUser', function() {
      it('should send request loginUser successfully', ()=> {
        //uncomment below and update the code to test loginUser
        //return requests.loginUser(opts: any).then(response=> {
        //  if (error) throw error;
        //  expect(response).to.be();
        //});

      });
    });

    describe('logoutUser', function() {
      it('should send request logoutUser successfully', ()=> {
        //uncomment below and update the code to test logoutUser
        //return requests.logoutUser().then(response=> {
        //  if (error) throw error;
        //  expect(response).to.be();
        //});

      });
    });

    describe('updateUser', function() {
      it('should send request updateUser successfully', ()=> {
        //uncomment below and update the code to test updateUser
        //return requests.updateUser(username: string, opts: any).then(response=> {
        //  if (error) throw error;
        //  expect(response).to.be();
        //});

      });
    });

});
